<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gos on Marsettler</title>
    <link>https://marsettler.com/go/</link>
    <description>Recent content in Gos on Marsettler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Jun 2023 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://marsettler.com/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 성능 최적화 팁</title>
      <link>https://marsettler.com/go/go-performance-optimization-tips/</link>
      <pubDate>Sun, 04 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/go/go-performance-optimization-tips/</guid>
      <description>&lt;h2 id=&#34;go---&#34;&gt;Go 성능 최적화 팁&lt;/h2&gt;
&lt;p&gt;박재완&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;airbridge--luft&#34;&gt;Airbridge 와 Luft&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.airbridge.io/&#34;&gt;Airbridge&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;합리적인 비용의 올인원 모바일 마케팅 솔루션&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.ab180.co/stories/introducing-luft&#34;&gt;Luft&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Airbridge 에서 유저행동 분석을 위해 사용하는 OLAP 데이터베이스&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.ab180.co/stories/traildb-to-ziegel&#34;&gt;Ziegel&lt;/a&gt; 을 스토리지 엔진으로 사용&lt;/li&gt;
&lt;li&gt;Go 로 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; to Go</title>
      <link>https://marsettler.com/go/c&#43;&#43;-to-go/</link>
      <pubDate>Sun, 04 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/go/c&#43;&#43;-to-go/</guid>
      <description>C++ to Go Introducing Ziegel 박재완
 Luft  Ziegel and TrailDB   Luft  OLAP database for analize the analyzing user behavior in real-time Use TrailDB as a storage Written in C/C++ and Go   TrailDB  TrailDB is an efficient tool for storing and querying series of events Written in C   Ziegel  New storage engine for the Luft Written in Go   Why?</description>
    </item>
    
    <item>
      <title>Go good reads</title>
      <link>https://marsettler.com/go/go-good-reads/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/go/go-good-reads/</guid>
      <description>Index  Performance Generics Others  Performance Go 1.22 inlining overhaul pprof documentation A Deep Look Into Golang Profile-Guided Optimization (PGO) Profiling and Execution Tracing in Go  What I learned  pprof can diff with go tool pprof -http=:8080 -diff_base &amp;lt;file2&amp;gt; &amp;lt;file1&amp;gt;    How to Write Accurate Benchmarks in Go  Not resetting or pausing the timer Making wrong assumptions about micro-benchmarks Not being careful about compiler optimizations Being fooled by the observer effect  Obscure Go Optimisations - Bryan Boreham  Take-aways  Slice-to-interface cast will allocate.</description>
    </item>
    
    <item>
      <title>Go의 철학</title>
      <link>https://marsettler.com/go/the-zen-of-go/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/go/the-zen-of-go/</guid>
      <description>Dave Cheney의 The Zen of Go를 번역했습니다. 좀 더 알고 싶으신 분은 발표 영상과 블로그 글을 함께 참고해 주십시오.
 Go의 철학 쉽고, 읽기 좋으며, 유지가능한 Go 코드 작성을 위한 10가지 엔지니어링 가치. 고퍼콘 이스라엘 2020에 발표하였음.
패키지는 하나의 목적만을 달성합니다 잘 디자인된 Go 패키지는 단 하나의 아이디어와 관련 동작을 제공합니다. 좋은 Go 패키지를 위해 좋은 이름을 먼저 정해야 합니다. 엘리베이터 피치라고 생각하며 패키지 이름을 정해보십시오.
에러는 명시적으로 처리합니다 단단한 프로그램은 문제가 생기기 전에 실패처리를 하는 요소들로 이루어져 있습니다.</description>
    </item>
    
    <item>
      <title>xvfb를 이용한 Go headless 테스트</title>
      <link>https://marsettler.com/go/go-headless-test-with-xvfb/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/go/go-headless-test-with-xvfb/</guid>
      <description>Go에서 GLFW 등을 이용해 그래픽스 관련 작업을 할 때에도 자동화 테스트 구성이 가능합니다. 하지만 GitHub Actions과 같이 디스플레이가 없는 환경에서는 의존성을 가지고 있다는 이유만으로 그래픽스 관련 테스트가 실패합니다.
xvfb는 메뉴얼에서 virtual framebuffer X server for X Version 라고 소개되고 있으며, 서버 사이드 테스트를 위해 주로 사용됩니다.
Ubuntu 기준으로 sudo apt install xvfb로 설치하고 xvfb-run에 이어서 테스트 명령어를 추가하여 테스트할 수 있습니다. 실제 GitHub Actions에 적용한 예시를 공유드립니다.</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://marsettler.com/go/go/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/go/go/</guid>
      <description>xvfb를 이용한 Go headless 테스트
Go의 철학
Go module에서 GitHub private repository 사용
좋은 읽을거리</description>
    </item>
    
    <item>
      <title>Go module에서 GitHub private 저장소 사용</title>
      <link>https://marsettler.com/go/using-go-module-with-github-private-repository/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://marsettler.com/go/using-go-module-with-github-private-repository/</guid>
      <description>Go module에서 GitHub private 저장소를 사용하는 방법입니다.
 git 설정에서 GitHub 접근을 계정과 토큰을 사용하게 변경 git config --global url.&amp;#34;https://${GITHUB_USER}:${{GITHUB_TOKEN}}@github.com&amp;#34;.insteadOf &amp;#34;https://github.com&amp;#34; GOPRIVATE 환경변수에 private 저장소 등록 GOPRIVATE=&amp;#34;github.com/hueypark/asset&amp;#34; </description>
    </item>
    
  </channel>
</rss>